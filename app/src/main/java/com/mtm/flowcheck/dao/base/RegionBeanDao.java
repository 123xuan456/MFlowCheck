package com.mtm.flowcheck.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.flowcheck.bean.dao.RegionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION_BEAN".
*/
public class RegionBeanDao extends AbstractDao<RegionBean, Void> {

    public static final String TABLENAME = "REGION_BEAN";

    /**
     * Properties of entity RegionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", false, "ID");
        public final static Property PID = new Property(1, String.class, "PID", false, "PID");
        public final static Property AREA_CODE = new Property(2, String.class, "AREA_CODE", false, "AREA__CODE");
        public final static Property AREA_NAM = new Property(3, String.class, "AREA_NAM", false, "AREA__NAM");
        public final static Property ALL_NAME = new Property(4, String.class, "ALL_NAME", false, "ALL__NAME");
    }


    public RegionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RegionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: ID
                "\"PID\" TEXT," + // 1: PID
                "\"AREA__CODE\" TEXT," + // 2: AREA_CODE
                "\"AREA__NAM\" TEXT," + // 3: AREA_NAM
                "\"ALL__NAME\" TEXT);"); // 4: ALL_NAME
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REGION_BEAN_ID ON \"REGION_BEAN\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegionBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String PID = entity.getPID();
        if (PID != null) {
            stmt.bindString(2, PID);
        }
 
        String AREA_CODE = entity.getAREA_CODE();
        if (AREA_CODE != null) {
            stmt.bindString(3, AREA_CODE);
        }
 
        String AREA_NAM = entity.getAREA_NAM();
        if (AREA_NAM != null) {
            stmt.bindString(4, AREA_NAM);
        }
 
        String ALL_NAME = entity.getALL_NAME();
        if (ALL_NAME != null) {
            stmt.bindString(5, ALL_NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegionBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String PID = entity.getPID();
        if (PID != null) {
            stmt.bindString(2, PID);
        }
 
        String AREA_CODE = entity.getAREA_CODE();
        if (AREA_CODE != null) {
            stmt.bindString(3, AREA_CODE);
        }
 
        String AREA_NAM = entity.getAREA_NAM();
        if (AREA_NAM != null) {
            stmt.bindString(4, AREA_NAM);
        }
 
        String ALL_NAME = entity.getALL_NAME();
        if (ALL_NAME != null) {
            stmt.bindString(5, ALL_NAME);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RegionBean readEntity(Cursor cursor, int offset) {
        RegionBean entity = new RegionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AREA_CODE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AREA_NAM
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ALL_NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegionBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAREA_CODE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAREA_NAM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setALL_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RegionBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RegionBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(RegionBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

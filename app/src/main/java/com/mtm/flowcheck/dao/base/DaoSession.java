package com.mtm.flowcheck.dao.base;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.mtm.flowcheck.bean.CheckBean;
import com.mtm.flowcheck.bean.dao.OrganBean;
import com.mtm.flowcheck.bean.dao.RegionBean;
import com.mtm.flowcheck.bean.LinkBean;
import com.mtm.flowcheck.bean.UserBean;

import com.mtm.flowcheck.dao.base.CheckBeanDao;
import com.mtm.flowcheck.dao.base.OrganBeanDao;
import com.mtm.flowcheck.dao.base.RegionBeanDao;
import com.mtm.flowcheck.dao.base.LinkBeanDao;
import com.mtm.flowcheck.dao.base.UserBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig checkBeanDaoConfig;
    private final DaoConfig organBeanDaoConfig;
    private final DaoConfig regionBeanDaoConfig;
    private final DaoConfig linkBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;

    private final CheckBeanDao checkBeanDao;
    private final OrganBeanDao organBeanDao;
    private final RegionBeanDao regionBeanDao;
    private final LinkBeanDao linkBeanDao;
    private final UserBeanDao userBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        checkBeanDaoConfig = daoConfigMap.get(CheckBeanDao.class).clone();
        checkBeanDaoConfig.initIdentityScope(type);

        organBeanDaoConfig = daoConfigMap.get(OrganBeanDao.class).clone();
        organBeanDaoConfig.initIdentityScope(type);

        regionBeanDaoConfig = daoConfigMap.get(RegionBeanDao.class).clone();
        regionBeanDaoConfig.initIdentityScope(type);

        linkBeanDaoConfig = daoConfigMap.get(LinkBeanDao.class).clone();
        linkBeanDaoConfig.initIdentityScope(type);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        checkBeanDao = new CheckBeanDao(checkBeanDaoConfig, this);
        organBeanDao = new OrganBeanDao(organBeanDaoConfig, this);
        regionBeanDao = new RegionBeanDao(regionBeanDaoConfig, this);
        linkBeanDao = new LinkBeanDao(linkBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);

        registerDao(CheckBean.class, checkBeanDao);
        registerDao(OrganBean.class, organBeanDao);
        registerDao(RegionBean.class, regionBeanDao);
        registerDao(LinkBean.class, linkBeanDao);
        registerDao(UserBean.class, userBeanDao);
    }
    
    public void clear() {
        checkBeanDaoConfig.clearIdentityScope();
        organBeanDaoConfig.clearIdentityScope();
        regionBeanDaoConfig.clearIdentityScope();
        linkBeanDaoConfig.clearIdentityScope();
        userBeanDaoConfig.clearIdentityScope();
    }

    public CheckBeanDao getCheckBeanDao() {
        return checkBeanDao;
    }

    public OrganBeanDao getOrganBeanDao() {
        return organBeanDao;
    }

    public RegionBeanDao getRegionBeanDao() {
        return regionBeanDao;
    }

    public LinkBeanDao getLinkBeanDao() {
        return linkBeanDao;
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

}

package com.mtm.flowcheck.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.flowcheck.bean.CheckBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_BEAN".
*/
public class CheckBeanDao extends AbstractDao<CheckBean, Void> {

    public static final String TABLENAME = "CHECK_BEAN";

    /**
     * Properties of entity CheckBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CaseId = new Property(0, String.class, "caseId", false, "CASE_ID");
        public final static Property ConfirmedOrder = new Property(1, String.class, "confirmedOrder", false, "CONFIRMED_ORDER");
        public final static Property ConfirmedSources = new Property(2, String.class, "confirmedSources", false, "CONFIRMED_SOURCES");
        public final static Property DiagnosisType = new Property(3, String.class, "diagnosisType", false, "DIAGNOSIS_TYPE");
        public final static Property PatientName = new Property(4, String.class, "patientName", false, "PATIENT_NAME");
        public final static Property IdCard = new Property(5, String.class, "idCard", false, "ID_CARD");
        public final static Property Gender = new Property(6, String.class, "gender", false, "GENDER");
        public final static Property BirthdayDate = new Property(7, String.class, "birthdayDate", false, "BIRTHDAY_DATE");
        public final static Property Age = new Property(8, String.class, "age", false, "AGE");
        public final static Property Telecom = new Property(9, String.class, "telecom", false, "TELECOM");
        public final static Property RegionCase = new Property(10, String.class, "regionCase", false, "REGION_CASE");
        public final static Property AreaType = new Property(11, String.class, "areaType", false, "AREA_TYPE");
        public final static Property AddrCode = new Property(12, String.class, "addrCode", false, "ADDR_CODE");
        public final static Property Unit = new Property(13, String.class, "unit", false, "UNIT");
        public final static Property Professional = new Property(14, String.class, "professional", false, "PROFESSIONAL");
        public final static Property EpiStartDate = new Property(15, String.class, "epiStartDate", false, "EPI_START_DATE");
        public final static Property DyqStartDate = new Property(16, String.class, "dyqStartDate", false, "DYQ_START_DATE");
        public final static Property ClinicDate = new Property(17, String.class, "clinicDate", false, "CLINIC_DATE");
        public final static Property DiagnoseDate = new Property(18, String.class, "diagnoseDate", false, "DIAGNOSE_DATE");
        public final static Property ReportHospital = new Property(19, String.class, "reportHospital", false, "REPORT_HOSPITAL");
        public final static Property IntoHospital = new Property(20, String.class, "intoHospital", false, "INTO_HOSPITAL");
        public final static Property IntoHospitalDate = new Property(21, String.class, "intoHospitalDate", false, "INTO_HOSPITAL_DATE");
        public final static Property ClinicalSeverity = new Property(22, String.class, "clinicalSeverity", false, "CLINICAL_SEVERITY");
        public final static Property Outcome = new Property(23, String.class, "outcome", false, "OUTCOME");
        public final static Property OutcomeDate = new Property(24, String.class, "outcomeDate", false, "OUTCOME_DATE");
        public final static Property CaseType = new Property(25, String.class, "caseType", false, "CASE_TYPE");
        public final static Property IfchronicDisease = new Property(26, String.class, "ifchronicDisease", false, "IFCHRONIC_DISEASE");
        public final static Property IchronicDiseaseNote = new Property(27, String.class, "ichronicDiseaseNote", false, "ICHRONIC_DISEASE_NOTE");
        public final static Property Wbc = new Property(28, String.class, "wbc", false, "WBC");
        public final static Property IfFever = new Property(29, String.class, "ifFever", false, "IF_FEVER");
        public final static Property BodyTemp = new Property(30, String.class, "bodyTemp", false, "BODY_TEMP");
        public final static Property Symptoms = new Property(31, String.class, "symptoms", false, "SYMPTOMS");
        public final static Property SymptomsOth = new Property(32, String.class, "symptomsOth", false, "SYMPTOMS_OTH");
        public final static Property ProvContNum = new Property(33, String.class, "provContNum", false, "PROV_CONT_NUM");
        public final static Property FamlContNum = new Property(34, String.class, "famlContNum", false, "FAML_CONT_NUM");
        public final static Property InfectOriginSort = new Property(35, String.class, "infectOriginSort", false, "INFECT_ORIGIN_SORT");
        public final static Property InfectCity = new Property(36, String.class, "infectCity", false, "INFECT_CITY");
        public final static Property InfectOrigTo = new Property(37, String.class, "infectOrigTo", false, "INFECT_ORIG_TO");
        public final static Property TrafficTools = new Property(38, String.class, "trafficTools", false, "TRAFFIC_TOOLS");
        public final static Property SuspExposurehis = new Property(39, String.class, "suspExposurehis", false, "SUSP_EXPOSUREHIS");
        public final static Property IfFamily = new Property(40, String.class, "ifFamily", false, "IF_FAMILY");
        public final static Property Relationship = new Property(41, String.class, "relationship", false, "RELATIONSHIP");
        public final static Property InputLocal = new Property(42, String.class, "inputLocal", false, "INPUT_LOCAL");
        public final static Property InitialExposure = new Property(43, String.class, "initialExposure", false, "INITIAL_EXPOSURE");
        public final static Property LastExposure = new Property(44, String.class, "lastExposure", false, "LAST_EXPOSURE");
        public final static Property DurationExten = new Property(45, String.class, "durationExten", false, "DURATION_EXTEN");
        public final static Property ReportUser = new Property(46, String.class, "reportUser", false, "REPORT_USER");
        public final static Property CardCode = new Property(47, String.class, "cardCode", false, "CARD_CODE");
        public final static Property IsDone = new Property(48, int.class, "isDone", false, "IS_DONE");
    }


    public CheckBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_BEAN\" (" + //
                "\"CASE_ID\" TEXT," + // 0: caseId
                "\"CONFIRMED_ORDER\" TEXT," + // 1: confirmedOrder
                "\"CONFIRMED_SOURCES\" TEXT," + // 2: confirmedSources
                "\"DIAGNOSIS_TYPE\" TEXT," + // 3: diagnosisType
                "\"PATIENT_NAME\" TEXT," + // 4: patientName
                "\"ID_CARD\" TEXT," + // 5: idCard
                "\"GENDER\" TEXT," + // 6: gender
                "\"BIRTHDAY_DATE\" TEXT," + // 7: birthdayDate
                "\"AGE\" TEXT," + // 8: age
                "\"TELECOM\" TEXT," + // 9: telecom
                "\"REGION_CASE\" TEXT," + // 10: regionCase
                "\"AREA_TYPE\" TEXT," + // 11: areaType
                "\"ADDR_CODE\" TEXT," + // 12: addrCode
                "\"UNIT\" TEXT," + // 13: unit
                "\"PROFESSIONAL\" TEXT," + // 14: professional
                "\"EPI_START_DATE\" TEXT," + // 15: epiStartDate
                "\"DYQ_START_DATE\" TEXT," + // 16: dyqStartDate
                "\"CLINIC_DATE\" TEXT," + // 17: clinicDate
                "\"DIAGNOSE_DATE\" TEXT," + // 18: diagnoseDate
                "\"REPORT_HOSPITAL\" TEXT," + // 19: reportHospital
                "\"INTO_HOSPITAL\" TEXT," + // 20: intoHospital
                "\"INTO_HOSPITAL_DATE\" TEXT," + // 21: intoHospitalDate
                "\"CLINICAL_SEVERITY\" TEXT," + // 22: clinicalSeverity
                "\"OUTCOME\" TEXT," + // 23: outcome
                "\"OUTCOME_DATE\" TEXT," + // 24: outcomeDate
                "\"CASE_TYPE\" TEXT," + // 25: caseType
                "\"IFCHRONIC_DISEASE\" TEXT," + // 26: ifchronicDisease
                "\"ICHRONIC_DISEASE_NOTE\" TEXT," + // 27: ichronicDiseaseNote
                "\"WBC\" TEXT," + // 28: wbc
                "\"IF_FEVER\" TEXT," + // 29: ifFever
                "\"BODY_TEMP\" TEXT," + // 30: bodyTemp
                "\"SYMPTOMS\" TEXT," + // 31: symptoms
                "\"SYMPTOMS_OTH\" TEXT," + // 32: symptomsOth
                "\"PROV_CONT_NUM\" TEXT," + // 33: provContNum
                "\"FAML_CONT_NUM\" TEXT," + // 34: famlContNum
                "\"INFECT_ORIGIN_SORT\" TEXT," + // 35: infectOriginSort
                "\"INFECT_CITY\" TEXT," + // 36: infectCity
                "\"INFECT_ORIG_TO\" TEXT," + // 37: infectOrigTo
                "\"TRAFFIC_TOOLS\" TEXT," + // 38: trafficTools
                "\"SUSP_EXPOSUREHIS\" TEXT," + // 39: suspExposurehis
                "\"IF_FAMILY\" TEXT," + // 40: ifFamily
                "\"RELATIONSHIP\" TEXT," + // 41: relationship
                "\"INPUT_LOCAL\" TEXT," + // 42: inputLocal
                "\"INITIAL_EXPOSURE\" TEXT," + // 43: initialExposure
                "\"LAST_EXPOSURE\" TEXT," + // 44: lastExposure
                "\"DURATION_EXTEN\" TEXT," + // 45: durationExten
                "\"REPORT_USER\" TEXT," + // 46: reportUser
                "\"CARD_CODE\" TEXT," + // 47: cardCode
                "\"IS_DONE\" INTEGER NOT NULL );"); // 48: isDone
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHECK_BEAN_CASE_ID ON \"CHECK_BEAN\"" +
                " (\"CASE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckBean entity) {
        stmt.clearBindings();
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(1, caseId);
        }
 
        String confirmedOrder = entity.getConfirmedOrder();
        if (confirmedOrder != null) {
            stmt.bindString(2, confirmedOrder);
        }
 
        String confirmedSources = entity.getConfirmedSources();
        if (confirmedSources != null) {
            stmt.bindString(3, confirmedSources);
        }
 
        String diagnosisType = entity.getDiagnosisType();
        if (diagnosisType != null) {
            stmt.bindString(4, diagnosisType);
        }
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(5, patientName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(6, idCard);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String birthdayDate = entity.getBirthdayDate();
        if (birthdayDate != null) {
            stmt.bindString(8, birthdayDate);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String telecom = entity.getTelecom();
        if (telecom != null) {
            stmt.bindString(10, telecom);
        }
 
        String regionCase = entity.getRegionCase();
        if (regionCase != null) {
            stmt.bindString(11, regionCase);
        }
 
        String areaType = entity.getAreaType();
        if (areaType != null) {
            stmt.bindString(12, areaType);
        }
 
        String addrCode = entity.getAddrCode();
        if (addrCode != null) {
            stmt.bindString(13, addrCode);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(15, professional);
        }
 
        String epiStartDate = entity.getEpiStartDate();
        if (epiStartDate != null) {
            stmt.bindString(16, epiStartDate);
        }
 
        String dyqStartDate = entity.getDyqStartDate();
        if (dyqStartDate != null) {
            stmt.bindString(17, dyqStartDate);
        }
 
        String clinicDate = entity.getClinicDate();
        if (clinicDate != null) {
            stmt.bindString(18, clinicDate);
        }
 
        String diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindString(19, diagnoseDate);
        }
 
        String reportHospital = entity.getReportHospital();
        if (reportHospital != null) {
            stmt.bindString(20, reportHospital);
        }
 
        String intoHospital = entity.getIntoHospital();
        if (intoHospital != null) {
            stmt.bindString(21, intoHospital);
        }
 
        String intoHospitalDate = entity.getIntoHospitalDate();
        if (intoHospitalDate != null) {
            stmt.bindString(22, intoHospitalDate);
        }
 
        String clinicalSeverity = entity.getClinicalSeverity();
        if (clinicalSeverity != null) {
            stmt.bindString(23, clinicalSeverity);
        }
 
        String outcome = entity.getOutcome();
        if (outcome != null) {
            stmt.bindString(24, outcome);
        }
 
        String outcomeDate = entity.getOutcomeDate();
        if (outcomeDate != null) {
            stmt.bindString(25, outcomeDate);
        }
 
        String caseType = entity.getCaseType();
        if (caseType != null) {
            stmt.bindString(26, caseType);
        }
 
        String ifchronicDisease = entity.getIfchronicDisease();
        if (ifchronicDisease != null) {
            stmt.bindString(27, ifchronicDisease);
        }
 
        String ichronicDiseaseNote = entity.getIchronicDiseaseNote();
        if (ichronicDiseaseNote != null) {
            stmt.bindString(28, ichronicDiseaseNote);
        }
 
        String wbc = entity.getWbc();
        if (wbc != null) {
            stmt.bindString(29, wbc);
        }
 
        String ifFever = entity.getIfFever();
        if (ifFever != null) {
            stmt.bindString(30, ifFever);
        }
 
        String bodyTemp = entity.getBodyTemp();
        if (bodyTemp != null) {
            stmt.bindString(31, bodyTemp);
        }
 
        String symptoms = entity.getSymptoms();
        if (symptoms != null) {
            stmt.bindString(32, symptoms);
        }
 
        String symptomsOth = entity.getSymptomsOth();
        if (symptomsOth != null) {
            stmt.bindString(33, symptomsOth);
        }
 
        String provContNum = entity.getProvContNum();
        if (provContNum != null) {
            stmt.bindString(34, provContNum);
        }
 
        String famlContNum = entity.getFamlContNum();
        if (famlContNum != null) {
            stmt.bindString(35, famlContNum);
        }
 
        String infectOriginSort = entity.getInfectOriginSort();
        if (infectOriginSort != null) {
            stmt.bindString(36, infectOriginSort);
        }
 
        String infectCity = entity.getInfectCity();
        if (infectCity != null) {
            stmt.bindString(37, infectCity);
        }
 
        String infectOrigTo = entity.getInfectOrigTo();
        if (infectOrigTo != null) {
            stmt.bindString(38, infectOrigTo);
        }
 
        String trafficTools = entity.getTrafficTools();
        if (trafficTools != null) {
            stmt.bindString(39, trafficTools);
        }
 
        String suspExposurehis = entity.getSuspExposurehis();
        if (suspExposurehis != null) {
            stmt.bindString(40, suspExposurehis);
        }
 
        String ifFamily = entity.getIfFamily();
        if (ifFamily != null) {
            stmt.bindString(41, ifFamily);
        }
 
        String relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(42, relationship);
        }
 
        String inputLocal = entity.getInputLocal();
        if (inputLocal != null) {
            stmt.bindString(43, inputLocal);
        }
 
        String initialExposure = entity.getInitialExposure();
        if (initialExposure != null) {
            stmt.bindString(44, initialExposure);
        }
 
        String lastExposure = entity.getLastExposure();
        if (lastExposure != null) {
            stmt.bindString(45, lastExposure);
        }
 
        String durationExten = entity.getDurationExten();
        if (durationExten != null) {
            stmt.bindString(46, durationExten);
        }
 
        String reportUser = entity.getReportUser();
        if (reportUser != null) {
            stmt.bindString(47, reportUser);
        }
 
        String cardCode = entity.getCardCode();
        if (cardCode != null) {
            stmt.bindString(48, cardCode);
        }
        stmt.bindLong(49, entity.getIsDone());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckBean entity) {
        stmt.clearBindings();
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(1, caseId);
        }
 
        String confirmedOrder = entity.getConfirmedOrder();
        if (confirmedOrder != null) {
            stmt.bindString(2, confirmedOrder);
        }
 
        String confirmedSources = entity.getConfirmedSources();
        if (confirmedSources != null) {
            stmt.bindString(3, confirmedSources);
        }
 
        String diagnosisType = entity.getDiagnosisType();
        if (diagnosisType != null) {
            stmt.bindString(4, diagnosisType);
        }
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(5, patientName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(6, idCard);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String birthdayDate = entity.getBirthdayDate();
        if (birthdayDate != null) {
            stmt.bindString(8, birthdayDate);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String telecom = entity.getTelecom();
        if (telecom != null) {
            stmt.bindString(10, telecom);
        }
 
        String regionCase = entity.getRegionCase();
        if (regionCase != null) {
            stmt.bindString(11, regionCase);
        }
 
        String areaType = entity.getAreaType();
        if (areaType != null) {
            stmt.bindString(12, areaType);
        }
 
        String addrCode = entity.getAddrCode();
        if (addrCode != null) {
            stmt.bindString(13, addrCode);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(15, professional);
        }
 
        String epiStartDate = entity.getEpiStartDate();
        if (epiStartDate != null) {
            stmt.bindString(16, epiStartDate);
        }
 
        String dyqStartDate = entity.getDyqStartDate();
        if (dyqStartDate != null) {
            stmt.bindString(17, dyqStartDate);
        }
 
        String clinicDate = entity.getClinicDate();
        if (clinicDate != null) {
            stmt.bindString(18, clinicDate);
        }
 
        String diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindString(19, diagnoseDate);
        }
 
        String reportHospital = entity.getReportHospital();
        if (reportHospital != null) {
            stmt.bindString(20, reportHospital);
        }
 
        String intoHospital = entity.getIntoHospital();
        if (intoHospital != null) {
            stmt.bindString(21, intoHospital);
        }
 
        String intoHospitalDate = entity.getIntoHospitalDate();
        if (intoHospitalDate != null) {
            stmt.bindString(22, intoHospitalDate);
        }
 
        String clinicalSeverity = entity.getClinicalSeverity();
        if (clinicalSeverity != null) {
            stmt.bindString(23, clinicalSeverity);
        }
 
        String outcome = entity.getOutcome();
        if (outcome != null) {
            stmt.bindString(24, outcome);
        }
 
        String outcomeDate = entity.getOutcomeDate();
        if (outcomeDate != null) {
            stmt.bindString(25, outcomeDate);
        }
 
        String caseType = entity.getCaseType();
        if (caseType != null) {
            stmt.bindString(26, caseType);
        }
 
        String ifchronicDisease = entity.getIfchronicDisease();
        if (ifchronicDisease != null) {
            stmt.bindString(27, ifchronicDisease);
        }
 
        String ichronicDiseaseNote = entity.getIchronicDiseaseNote();
        if (ichronicDiseaseNote != null) {
            stmt.bindString(28, ichronicDiseaseNote);
        }
 
        String wbc = entity.getWbc();
        if (wbc != null) {
            stmt.bindString(29, wbc);
        }
 
        String ifFever = entity.getIfFever();
        if (ifFever != null) {
            stmt.bindString(30, ifFever);
        }
 
        String bodyTemp = entity.getBodyTemp();
        if (bodyTemp != null) {
            stmt.bindString(31, bodyTemp);
        }
 
        String symptoms = entity.getSymptoms();
        if (symptoms != null) {
            stmt.bindString(32, symptoms);
        }
 
        String symptomsOth = entity.getSymptomsOth();
        if (symptomsOth != null) {
            stmt.bindString(33, symptomsOth);
        }
 
        String provContNum = entity.getProvContNum();
        if (provContNum != null) {
            stmt.bindString(34, provContNum);
        }
 
        String famlContNum = entity.getFamlContNum();
        if (famlContNum != null) {
            stmt.bindString(35, famlContNum);
        }
 
        String infectOriginSort = entity.getInfectOriginSort();
        if (infectOriginSort != null) {
            stmt.bindString(36, infectOriginSort);
        }
 
        String infectCity = entity.getInfectCity();
        if (infectCity != null) {
            stmt.bindString(37, infectCity);
        }
 
        String infectOrigTo = entity.getInfectOrigTo();
        if (infectOrigTo != null) {
            stmt.bindString(38, infectOrigTo);
        }
 
        String trafficTools = entity.getTrafficTools();
        if (trafficTools != null) {
            stmt.bindString(39, trafficTools);
        }
 
        String suspExposurehis = entity.getSuspExposurehis();
        if (suspExposurehis != null) {
            stmt.bindString(40, suspExposurehis);
        }
 
        String ifFamily = entity.getIfFamily();
        if (ifFamily != null) {
            stmt.bindString(41, ifFamily);
        }
 
        String relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(42, relationship);
        }
 
        String inputLocal = entity.getInputLocal();
        if (inputLocal != null) {
            stmt.bindString(43, inputLocal);
        }
 
        String initialExposure = entity.getInitialExposure();
        if (initialExposure != null) {
            stmt.bindString(44, initialExposure);
        }
 
        String lastExposure = entity.getLastExposure();
        if (lastExposure != null) {
            stmt.bindString(45, lastExposure);
        }
 
        String durationExten = entity.getDurationExten();
        if (durationExten != null) {
            stmt.bindString(46, durationExten);
        }
 
        String reportUser = entity.getReportUser();
        if (reportUser != null) {
            stmt.bindString(47, reportUser);
        }
 
        String cardCode = entity.getCardCode();
        if (cardCode != null) {
            stmt.bindString(48, cardCode);
        }
        stmt.bindLong(49, entity.getIsDone());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CheckBean readEntity(Cursor cursor, int offset) {
        CheckBean entity = new CheckBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // caseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // confirmedOrder
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // confirmedSources
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // diagnosisType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // patientName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idCard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthdayDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telecom
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // regionCase
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // areaType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addrCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // professional
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // epiStartDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dyqStartDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // clinicDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // diagnoseDate
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // reportHospital
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // intoHospital
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // intoHospitalDate
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // clinicalSeverity
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // outcome
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // outcomeDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // caseType
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ifchronicDisease
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ichronicDiseaseNote
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // wbc
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // ifFever
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // bodyTemp
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // symptoms
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // symptomsOth
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // provContNum
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // famlContNum
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // infectOriginSort
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // infectCity
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // infectOrigTo
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // trafficTools
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // suspExposurehis
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // ifFamily
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // relationship
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // inputLocal
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // initialExposure
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // lastExposure
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // durationExten
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // reportUser
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // cardCode
            cursor.getInt(offset + 48) // isDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckBean entity, int offset) {
        entity.setCaseId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setConfirmedOrder(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setConfirmedSources(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiagnosisType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPatientName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdCard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthdayDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelecom(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRegionCase(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAreaType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddrCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProfessional(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEpiStartDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDyqStartDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setClinicDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDiagnoseDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReportHospital(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIntoHospital(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIntoHospitalDate(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setClinicalSeverity(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOutcome(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOutcomeDate(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCaseType(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIfchronicDisease(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIchronicDiseaseNote(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setWbc(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIfFever(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setBodyTemp(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSymptoms(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSymptomsOth(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setProvContNum(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setFamlContNum(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setInfectOriginSort(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setInfectCity(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setInfectOrigTo(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTrafficTools(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSuspExposurehis(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIfFamily(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setRelationship(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setInputLocal(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setInitialExposure(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setLastExposure(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setDurationExten(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setReportUser(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCardCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setIsDone(cursor.getInt(offset + 48));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CheckBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CheckBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(CheckBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.mtm.flowcheck.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.flowcheck.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Void> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property RealName = new Property(2, String.class, "realName", false, "REAL_NAME");
        public final static Property AreaCode = new Property(3, String.class, "areaCode", false, "AREA_CODE");
        public final static Property AreaName = new Property(4, String.class, "areaName", false, "AREA_NAME");
        public final static Property OrgCode = new Property(5, String.class, "orgCode", false, "ORG_CODE");
        public final static Property OrgName = new Property(6, String.class, "orgName", false, "ORG_NAME");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"USER_NAME\" TEXT," + // 0: userName
                "\"PASSWORD\" TEXT," + // 1: password
                "\"REAL_NAME\" TEXT," + // 2: realName
                "\"AREA_CODE\" TEXT," + // 3: areaCode
                "\"AREA_NAME\" TEXT," + // 4: areaName
                "\"ORG_CODE\" TEXT," + // 5: orgCode
                "\"ORG_NAME\" TEXT);"); // 6: orgName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(4, areaCode);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(5, areaName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(7, orgName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(4, areaCode);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(5, areaName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(7, orgName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orgCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // orgName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrgCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrgName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

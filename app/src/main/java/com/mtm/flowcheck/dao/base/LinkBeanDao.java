package com.mtm.flowcheck.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.flowcheck.bean.LinkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINK_BEAN".
*/
public class LinkBeanDao extends AbstractDao<LinkBean, Void> {

    public static final String TABLENAME = "LINK_BEAN";

    /**
     * Properties of entity LinkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskId = new Property(0, String.class, "taskId", false, "TASK_ID");
        public final static Property LinkType = new Property(1, int.class, "linkType", false, "LINK_TYPE");
        public final static Property LinkValue = new Property(2, int.class, "linkValue", false, "LINK_VALUE");
    }


    public LinkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LinkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINK_BEAN\" (" + //
                "\"TASK_ID\" TEXT," + // 0: taskId
                "\"LINK_TYPE\" INTEGER NOT NULL ," + // 1: linkType
                "\"LINK_VALUE\" INTEGER NOT NULL );"); // 2: linkValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LinkBean entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
        stmt.bindLong(2, entity.getLinkType());
        stmt.bindLong(3, entity.getLinkValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LinkBean entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
        stmt.bindLong(2, entity.getLinkType());
        stmt.bindLong(3, entity.getLinkValue());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LinkBean readEntity(Cursor cursor, int offset) {
        LinkBean entity = new LinkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskId
            cursor.getInt(offset + 1), // linkType
            cursor.getInt(offset + 2) // linkValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LinkBean entity, int offset) {
        entity.setTaskId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLinkType(cursor.getInt(offset + 1));
        entity.setLinkValue(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LinkBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LinkBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LinkBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
